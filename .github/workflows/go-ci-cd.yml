name: Go CI/CD Workflow

on:
  push:
    branches:
      - development
      - main
  pull_request:
    branches:
      - main

jobs:
  ci:
    name: Continuous Integration Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.3.0

      - name: Lint Go project
        run: |
          $(go env GOPATH)/bin/golangci-lint run ./...

      - name: Build Go project
        run: go build -v -o personal-finance-tracker-api ./cmd/...

  release:
    name: Release to GitHub and Docker
    runs-on: ubuntu-latest
    needs: ci
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Auto-increment Version and Create Tag
        id: versioning
        run: |
          # Read current version from VERSION file
          CURRENT_VERSION=$(cat VERSION)
          echo "Current version: $CURRENT_VERSION"

          # Extract major, minor, patch components
          MAJOR=$(echo $CURRENT_VERSION | awk -F'.' '{print $1}')
          MINOR=$(echo $CURRENT_VERSION | awk -F'.' '{print $2}')
          PATCH=$(echo $CURRENT_VERSION | awk -F'.' '{print $3}')

          # Increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          echo "New version: $NEW_VERSION"

          # Write new version back to VERSION file
          echo $NEW_VERSION > VERSION

          # Configure Git user for the commit
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Add and commit the updated VERSION file
          git add VERSION
          git commit -m "Release: Bump version to $NEW_VERSION"

          # Create Git tag
          git tag $NEW_VERSION

          # Push the updated VERSION file and the new tag
          git push origin main
          git push origin $NEW_VERSION

          # Set the new versions as a step output for other steps to use
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.release
          push: true
          tags: |
            'ghcr.io/${{ github.repository | lower }}:latest'
            'ghcr.io/${{ github.repository | lower }}:${{ steps.go_version.outputs.NEW_VERSION }}'

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.go_version.outputs.NEW_VERSION }}
          name: Release ${{ steps.go_version.outputs.NEW_VERSION }}
          body: "Automated release for version ${{ steps.go_version.outputs.NEW_VERSION }}"
          draft: false
          prerelease: false
