basePath: /api/v1
definitions:
  handlers.LoginResponse:
    properties:
      token:
        type: string
    type: object
  handlers.LoginUserRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  handlers.RegisterUserRequest:
    properties:
      password:
        description: Basic password validation
        minLength: 6
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - password
    - username
    type: object
  models.Category:
    type: object
  models.Transaction:
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      updatedAt:
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - username
    type: object
  responses.ErrorResponse:
    properties:
      details:
        type: string
      error:
        type: string
    type: object
  responses.ValidationErrorResponse:
    properties:
      error:
        type: string
      fields:
        items:
          $ref: '#/definitions/responses.ValidationFieldError'
        type: array
    type: object
  responses.ValidationFieldError:
    properties:
      field:
        type: string
      message:
        type: string
      tag:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@jacquesmurray.site
    name: Jacques Murray
    url: https://jacquesmurray.site/support
  description: This is a RESTful API for a personal finance tracking application.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: https://jacquesmurray.site/terms/
  title: Personal Finance Tracker API
  version: "1.0"
paths:
  /categories:
    get:
      description: Retrieve a list of all transaction categories with optional pagination,
        filtered by authenticated user
      parameters:
      - default: 100
        description: Maximum number of categories to retrieve
        in: query
        name: limit
        type: integer
      - default: 0
        description: Number of categories to skip
        in: query
        name: offset
        type: integer
      - description: Search categories by name (case-insensitive)
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Category'
            type: array
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized (missing or invalid token)
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get all categories
      tags:
      - categories
    post:
      consumes:
      - application/json
      description: Add a new category to the system, associated with the authenticated
        user
      parameters:
      - description: Category object
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.Category'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Category'
        "400":
          description: Invalid input or validation error
          schema:
            $ref: '#/definitions/responses.ValidationErrorResponse'
        "401":
          description: Unauthorized (missing or invalid token)
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "409":
          description: Conflict error (e.g., category name already exists for this
            user)
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Create a new category
      tags:
      - categories
  /transactions:
    get:
      description: Retrieve a list of all transactions, ordered by date
      parameters:
      - default: 100
        description: Maximum number of transaction to retrieve
        in: query
        name: limit
        type: integer
      - default: 0
        description: Number of transactions to skip
        in: query
        name: offset
        type: integer
      - description: Filter transactions from this date (YYYY-MM-DD)
        format: date
        in: query
        name: startDate
        type: string
      - description: Filter transactions up to this date (YYYY-MM-DD)
        format: date
        in: query
        name: endDate
        type: string
      - description: Filter by transaction type (income, expense)
        in: query
        name: type
        type: string
      - description: Search transactions by description (case-insensitive)
        in: query
        name: description
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Transaction'
            type: array
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized (missing or invalid token)
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get all transactions
      tags:
      - transactions
    post:
      consumes:
      - application/json
      description: Add a new income or expense transaction
      parameters:
      - description: Transaction object
        in: body
        name: transaction
        required: true
        schema:
          $ref: '#/definitions/models.Transaction'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Transaction'
        "400":
          description: Invalid input or validation error
          schema:
            $ref: '#/definitions/responses.ValidationErrorResponse'
        "409":
          description: Conflict error (e.g., transaction already exists)
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Create a new transaction
      tags:
      - transactions
  /transactions/export/csv:
    get:
      description: Download a CSV file containing all transaction data
      produces:
      - text/csv
      responses:
        "200":
          description: OK
          schema:
            type: file
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Export transactions to CSV
      tags:
      - transactions
  /users/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return an authentication token
      parameters:
      - description: User login details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Authentication successful with JWT token
          schema:
            $ref: '#/definitions/handlers.LoginResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/responses.ValidationErrorResponse'
        "401":
          description: Unauthorized (invalid credentials)
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Log in a user
      tags:
      - users
  /users/register:
    post:
      consumes:
      - application/json
      description: Register a new user with a username and password
      parameters:
      - description: User registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.RegisterUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid input or validation error
          schema:
            $ref: '#/definitions/responses.ValidationErrorResponse'
        "409":
          description: Conflict (username already exists)
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Register a new user
      tags:
      - users
swagger: "2.0"
